STATE::

State is a representation of all the data in the app.
    -Each comp. can have its own state, but think of it as an object that manages all data
    -we have state in our fish, in our order summary, etc. Data is being managed all over

State is essentially a master object, where all data is stored and managed.
    -whenever we want to change data on the page, we edit our state and let react change the HTML for us.
    -this way we don't have to keep track of every single place in the view where a piece of data is being referenced and
     update them individually, we change the data once in react and react updates the view everywhere its referenced.
    
So we created our fish object in AddFishForm. When you click the button a js object is created with all the vlaues of the inputs.

How do we get this object into our state?
    -State is always tied to a specific component, in this case, the <App /> component
    -Each component can have its own state, but a lot of the time you need to share state b/t components
    -In our case we want to share state b/t <Inventory />, <Order />, and <FishList />, which is why its good to store
     state in a parent component such as <App />

First we need to GetInitialState -- react needs to know what to expect, this establishes the groundwork for state
    -we do this by calling a constructor when we initialize our class in the <App /> component
        constructor() {
            super(); // can't use 'this' until we call super.
            this.state = {
                fishes: {},
                order: {}
            }
        }

How does our fish object get from <AddFishForm /> to the state object inside <App /> ?
    -create addFish() method in app that takes one argument, fish.
    -this method needs to update our state and set our state, and react makes us do a few things to make this happen
    -it is best practice to make a copy of your current state and then update your state
        addFish(fish) {
            const fishes = {...this.state.fishes};
        }
    -What is {...this.state.fishes}; ?
        -this is our current state. If we had 6 fishes in our current state, we take those and put them into a new state.
        - ... is a spread. It takes the 6 fishes and spreads them into our object. It basically is taking a copy of our
         current state and puts it into a new state called 'fishes'
    -now we add in our new fish. And we'll use a timestamp as our key so that its unique and incremental and we can easily order
     the items in the state object.
        addFish(fish) {
            // update our current state
            const fishes = {...this.state.fishes};

            // add new fish
            const timestamp = Date.now();
            fishes[`fish-${timestamp}`] = fish;
        }
    -now we have updated the state object and added our new fish, but the new fish hasn't yet been added to our state.
        -we do this by explicity telling react which state we would like to update
        -we don't want to update our entire state object bc react doesn't want to have to check everything currently in state
         so this isn't a good idea:
            this.setState(state;)
        -instead we can just tell react which part of state changed
            this.setState({ fishes: fishes });
    -now we can test this by manually calling the addFish method in the console
        $r.addFish({name: "ball fish", price: 5000});
    -then if we look in the react dev tools inside of state we have a new fish.

    -How do we get <AddFishForm />, a child component, up to <App /> ?
        -we do this with props
        -we have the addFish() method on <App /> but how do we call it from a component thats a couple levels deep, from
         <Inventory /> ?
        -In <App /> we are rendering out <Inventory />. So were passing the function down from <App /> to <Inventory />
            -now we can look in react dev tools and in <Inventory /> we can see that addFish() has been passed down in props
    
        *So we have a component <Inventory /> that is being rendered in side of a parent component <App />. In <App />
         we have a method, addFish(), that we need to make available to <Inventory />.
            -we simply place the addFish() method on the <Inventory /> component via props
                <Inventory addFish={this.addFish} />
            -this passes the function down to <Inventory />, making it props on the <Inventory /> component
        *Now addFish() is available to <Inventory /> as props. But we have to go one level deeper to <AddFishForm />, so now
         we can pass addFish() from <Inventory /> to <AddFishForm /> bc addFish() is on <Inventory /> as props.
            -so inside of <Inventory />, we simply render 
                <AddFishForm addFish={this.props.addFish};

        *In React we pass data around via props. We first created props on <Inventory /> via <Inventory addFish={this.addFish} />
            -now since addFish() is part of the props object, any child of <Inventory /> can gain access to the method by doing
                <AddFishForm addFish={this.props.addFish}

    -Lastly, on <AddFishForm />, after we create the new fish object, we can add the fish to state via addFish because we
     passed it to the component via props.
        -Now we can call the function after we create the new fish via
            this.props.addFish(fish);

    *We put addFish() on the <App /> component because that is where we are managing state. We want to have one large state object
     at the parent level. This is why we didn't put the addFish() method on <Inventory />. We manage state from <App />. 
        -addFish() isn't just adding a fish to some array, it is adding it to STATE, which we manage on the <App /> component.

................................................................................................................................

LOOPING OVER THE OBJECTS INSIDE STATE AND DISPLAYING THEM WITH JSX

-We can use Object.keys() to loop over the fishes object inside of our state object.
    -we can't use .map() initially because .map takes an array, and our fishes are an object
    -But Object.keys(this.state.fishes) returns an array made up of the keys of each fish value
        ['fish1', 'fish2', etc]
    -Now that we have an array we can loop over it with .map per usual. map() takes an array and then returns a second array

        Object.keys(this.state.fishes).map(key => <Fish />);

    -This will return (=>) a fish component for every key in the array.

    ** the arrow function, => means 'return' **

-This works and our sample fish are looped over and rendered to the screen, however, react yells at us in the console
 saying that each child in an iterator should have a unique key. It says this because without a unique key react doesn't
 know how to update a single fish, bc they all look the same.
    -To fix this we just need to set a key and the key can be anything, including 'key'

        .map(key => <Fish key={key} />);

    -{key} will set the key on the <Fish /> component to the key in the array we looped over from Object.keys(this.state.fishes)
    -Now if we load our sample data and look in our react dev tools we can see all the <Fish /> components that are being
     displayed and they each have a numerical key identical to the key from the sample-fishes.

        <Fish key="fish1"></Fish>
        <Fish key="fish2"></Fish>
        ...

-Now we want the <Fish /> component to actually load the properties on each fish object. We can do this by targeting each
 fish object in the array via the key and place this as props on the <Fish /> component

    <Fish key={key} details={this.state.fishes[key]} />

-Now there are details props under each fish component with all the properties on that fish.

*SUMMARY

To loop over something we first need an array. We get an array through

    Object.keys(this.state.fishes)

Now we can loop over the array with .map(), which can be passed anything, such as a list of keys, and return something else
such as a list of <Fish /> components

    .map(key => <Fish />)

    which essentially outputs the following =>

    ['fish1', 'fish2'].map(function (key) {
        return React.createElement(Fish, null);
    });

We then attach the proper key and property details to each fish component

    .map(key => <Fish key={key} details{this.state.fishes[key]} />)

...................

Now we can  go into Fish.js and just start writing some HTML.

-We added props to the <Fish /> component via 

    <Fish details={this.state.fishes[key]} />

Now we can access those props and display them via JSX

    <li className="menu-fish">{this.props.details.name}</li>

.........................................................................................

UPDATING ORDER STATE

We added a "Add To Order" button on the fish component. We need to hook this up so that its added to orders on state.

-Remember, we manage state on parent component, <App />, so we need to put the addToOrder() function inside the <App />
 component along with addFish()
    -this function will take in a key to keep track of which fish is being added

    addToOrder(key) {}
    
-Just like with addFish() we need to make a copy of our state

    addToOrder(key) {
        const order = {...this.state.order};
    }

-Then we need to add the order to our state object. But we need to first check to see if that type of fish is already in the order,
 if it is, then we add 1 to the order, if its not we make it 1.

    addToOrder(key) {
        const order = {...this.state.order};
        order[key] = order[key] + 1 || 1;
    }

-Then we just need to setState

    addToOrder(key) {
        const order = {...this.state.order};
        order[key] = order[key] + 1 || 1;
        this.setState({ order: order });
    }

-But how do we get a dynamic value into addToOrder(dynamic_value)?
    -we can't just do

        onClick={this.props.addToOrder(this.state.fishes[key])}

    b/c this will run on page load, and we want it to run when someone clicks the button. So instead we do

        onClick={() => this.addToOrder('fish-1')}

    -But this still isn't dynamic. While we passed key in as props inside <App /> we can't access the key from <Fish />
        -The key is for React, and React won't let us touch the key, so we have to explicitly pass it down.
        -We can pass it down as any prop we want, for example:

            .map(key => <Fish key={key} index={key} details={this.state.fishes[key]} addToOrder={this.addToOrder} />)

        -we passed {key} down via the 'index' prop, so now we have access to the key through 'index'.
            -index is for me, key is for react

.........................................................................................

DISPLAYING ORDER STATE

Rather than create a new component we're going to implement a 'render function'
    -we're not going to reuse the order functionality so no reason to make a component
    -but we're starting to have a lot of code in the render() method, so we need to clean this up.
    -We can do this by creating a separate render function that lives inside of our component
    -Inside of render() we can do

        {orderIds.map(this.renderOrder)}

    -Then above the render() method, we can create a new method called renderOrder()

        renderOrder(key) {
            ...
        }

    .map will loop through orderIds and pass each one into this.renderOrder()

.........................................................................................

CONNECTING TO FIREBASE

-When setting up the databse it may be helpful to change the read/write rules to true to remove authentication

-In <App /> find your state object.
    -note that order{} isn't going to be persisted to firebase because that will change per session. We will hook
     users{} up to localStorage next section
    -but we will be connecting to fishes{} object to firebase

We're going to sync our fishes{} object with Firebase via the Rebase package.

-create base.js file
    -import re-base

-we need to create our BASE. This is just a connection to the firebase database
    -then we pass this base class the API key, domain we're connecting to, and the database url

-import base class, from base.js, into <App />

React Life Cycle Hooks:

-When a component is rendered, or mounted into a page, React gives us entry points that we can 'hook' into and
 do various things, like do an ajax request or check for certain properties, etc.
    -we're going to use the 'componentWillMount' lifecycle hook to connect to rebase.
    -componentWillMount will connect to firebase and sync our state up a split second before <App /> is loaded, it
     is called before render()
    
-inside componentWillMount() we need to create a reference to the part of our state we want to sync with firebase

    this.ref = base.syncstate(...)

-syncstate() takes a string for the part of our state that we want to sync.
    -we don't want to sync the whole database (fish-market) just the fishes in the store
    -but to reference the fishes in the store we need the store name, which is random. But we can access it through
     params on the props object inside <App />. React Router gave us these params props.

    this.ref = base.syncState(`${this.props.params.storeId}/fishes`);

Then we need to pass in an object that take 'context' and 'state' arguments.

    this.ref = base.syncState(`${this.props.params.storeId}/fishes`
    , {
        context: this,
        state: 'fishes'
    });

-If we switch from one store to another, or switch pages, then we need to stop syncing with the current store.
    -otherwise we'll start racking up all these listeners and performance will go to shit.

    componentWillUnmount() {
        base.removeBinding(this.state);
    }

..........................................................

SAVING OUR ORDER TO LOCALSTORAGE 

-Setting items in localStorage
    -We use the 'componentWillUpdate()' hook which runs code whenever state or props are changed. It will run before the
     component is rendered
Getting items from localStorage
    -Inside of componentWillMount(), which is run when a component is loaded -- in our case when the page is loaded --
     we check to see if there's anything in localStorage that we need to pull in.

        const localStorageRef = localStorage.getItem(`order-${this.props.params.storeId}`);

        if(localStorageRef) {
            this.setState({
                order: JSON.parse(localStorageRef)
            });
        }

..........................................................

LIVE EDITING AND 2-WAY DATA BINDING

-Right now we have no way to edit our fish in inventory. We need to loop over our fish and populate each fish component
 with the data for the fish that have already been created.
    -This will change all components in realtime plus change our data in firebase
-To do this we can loop over all of our fish inside the inventory component.
    -Just like in <App /> we'll start with the Object.keys function to change our fishes object into an array that can 
     be looped over with .map()
    -first we need to pass down the fishes object to <Inventory /> via props
        <Inventory fishes={this.state.fishes} />
    -Inside of <Inventory /> we can then do 
        Object.keys(this.props.fishes)
    
-Now we have an array of keys that we can pass to a render function.
    Object.keys(this.props.fishes).map(this.renderInventory);

    renderInventory(key) {
        <p>{key}</p>
    }

    -now we know this works bc it prints out all of the keys of the fishes array
    -now we can create actual HTML. 
    -Remember when looping react requires key={key}

    -Now we can fill in the form elements just like we had them in <AddFishForm /> with the addition of 'name' attribute

        <div className="fish-edit key={key}>
            <input type="text" placeholder="Fish Name" value={fish.name} name="name"} />
            <input type="text" placeholder="Fish Price" value={fish.price} name="price"} />
            <select value={fish.status} name="status" placeholder="Fish Status"}>
                <option value="available">Fresh!</option>
                <option value="unavailable">Sold Out.</option>
            </select>
            <textarea placeholder="Fish Desc" value={fish.desc} name="desc"}></textarea>
            <input type="text" placeholder="Fish Image" value={fish.image} name="image"}/>
        </div>

-this gives us a warning in the console that says we provided a value without providing an onChange handler
    -react doesn't want us sticking state -- {fish.name, etc} -- without having a plan for updatng it
    -we need to tell react how we plan on updating said state, bc it wants one core area where our state is coming from
     which is our state defined inside <App />

-we need to put an onChange handler on each of the inputs and then update our corresponding state, which is held in <App />
    -we need to put an onChange() event listener on each input that gives us an event argument.
    -So we pass a function into onChange that handles the event (e)

        <input type="text" placeholder="Fish Name" value={fish.name} name="name"} 
         handleChange={(e) => this.handleChange(e,key)} />

        *we just made up handleChange() so we write it ourselves

        handleChange(e,key) {
            const fish = this.props.fishes[key];
            console.log(fish);
        }

-But were not able to actually edit fish information because we haven't updated state
    -so we need to make a copy of that fish and update it with the new data
    -we can do this witht he fish spread

    {...fish}

    -and then overlay our new properties on top of it, but we have to know what actually changed. We can do that with

    console.log(e.target)

    -this will give us the element that changed, and shows us why we needed to add the 'name' attribute to our element

    console.log(e.target.name, e.target.value)

    -name is the property we're updating and value is the new value we assigned
    -so we can take this updated fish and overlay the new properties on it
    -to do this we can use a 'computed property' -- [e.target.name] -- and this will allow us to change the property that
     was changed

    handleChange(e,key) {
        const fish = this.props.fishes[key];
        const updatedFish = {
            ...fish,
            [e.target.name]: e.target.value
        }
    }

-But this still isn't updating our actual inventory so we need one more method.
    -we need to to take 'const updatedFish' and pass it to <App />

-Inside <App /> we need to make an updateFish() method

    updateFish(key, updatedFish) {
        const fishes={...this.state.fishes};
        fishes[key] = updatedFish;
        this.setState{( fishes )};
    }

-Then we need to pass updatedFish to <Inventory /> via props
-Now we just need to copy the onChange handler to the other input fields

************************* REVIEW ***************************

*inside <Inventory /> we loop over the fishes object to create an array of keys to use in .map(), which we pass the
 renderInventory(key) function.

*inside renderInventory() we create a fish variable set to each fish in the mapped array based on key, and use map()
 to loop over all the fish and output the form with all the property inputs of each fish.

    const fish = this props.fishes[key]

*on each input we have an onChange() event listener that takes the event (the change made) and the fish key and passes 
 them to the handleChange(e,key) function, which again uses the key to target the individual fish thats been changed

    const fish = this props.fishes[key]

*Then inside the handleChange() function we make a copy of the fish object that was changed and overwrite the property
 that was changed with the new value. We know which property was changed because we added 'name' attributes to each input.
 So e.target.name will return the property changed, and e.target.value will return the new value.

    const updatedFish = {
        ...fish,
        [e.target.name]: e.target.value
    }

*We then passed the newly updated fish object up to our updateFish(key, updatedFish) function in <App />. This function
 takes the key (the position of the fish in the array of fishes) and the new fish Object

*Inside the function we make a copy of all the fishes, which we do whenever we update state

    const fishes = {...this.state.fishes};

*We then overwrite the old fish with the newly updated one

    fishes[key] = updatedFish;

*And then we save our new state

    this.setState({ fishes });






